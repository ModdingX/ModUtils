buildscript {
    if (java.nio.file.Files.isRegularFile(project.file('buildscript.gradle').toPath())) {
        println('Loading local buildscript.')
        apply from: 'buildscript.gradle', to: buildscript
    } else {
        if (Runtime.version().feature() < 17) {
    throw new IllegalStateException("ModUtils requires at least java 17, got " + Runtime.version().feature())
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.moddingx.org/' }

    maven { // Forge caching maven central may break things
        url = 'https://maven.minecraftforge.net'
        content {
            includeGroup 'cpw.mods'
            includeGroup 'de.oceanlabs.mcp'
            includeGroup 'net.minecraftforge'
            includeGroup 'org.mcmodlauncher'
        }
    }

    maven { url = 'https://libraries.minecraft.net' }
    maven { url = 'https://maven.parchmentmc.org' }

    maven { // For some reason this can break things by redirecting to bintray?!
        url = 'https://plugins.gradle.org/m2'
        content {
            includeGroupByRegex '^(gradle\\.plugin\\.)?net\\.darkhax\\.curseforgegradle.*'
            includeGroupByRegex '^(gradle\\.plugin\\.)?com\\.modrinth.*'
        }
    }

    maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
}

dependencies {
    classpath('net.minecraftforge.gradle:ForgeGradle') { version { strictly '6.0.4' } }
    classpath('org.moddingx:ModGradle') { version { strictly '4.0.2' } }
    classpath('org.parchmentmc:librarian') { version { strictly '1.2.0' } }
    classpath('net.darkhax.curseforgegradle:CurseForgeGradle') { version { strictly '1.0.14' } }
    classpath('com.modrinth.minotaur:Minotaur') { version { strictly '2.8.1' } }
    classpath 'org.spongepowered:mixingradle:0.7.33'
    classpath 'org.apache.maven:maven-artifact:3.9.1'
    classpath 'com.google.code.findbugs:jsr305:3.0.2'

    // ForgeGradle apparently does not know about version ranges and does not update their dependencies
    // Force a more recent version here
    classpath('de.siegmar:fastcsv') { version { strictly '[2.2.2,)' } }
}
    }
}

// Version check and loading essential properties
if (!org.apache.maven.artifact.versioning.VersionRange.createFromVersionSpec("[8.1.1,9.0)").containsVersion(new org.apache.maven.artifact.versioning.DefaultArtifactVersion(gradle.gradleVersion))) {
    throw new IllegalStateException("Gradle version ${gradle.gradleVersion} does not match required version range: [8.1.1,9.0)")
}
// Initialise mod properties
if (!project.file('mod.properties').exists()) {
    java.nio.file.Files.copy(new URL("https://raw.githubusercontent.com/ModdingX/ModUtils/experimental/mod.properties").openStream(), file('mod.properties').toPath())
    throw new RuntimeException("Default mod.properties file created. Re-run your build now.")
}

// Initialize the project in ModGradle manually before applying the plugins, so we can use the extension
org.moddingx.modgradle.ModGradle.initialiseProject(project)

;{
    Properties modProperties = new Properties()
    project.file('mod.properties').withReader { modProperties.load(it) }
    project.ext {
        mod = modgradle.wrap(modProperties)
    }
}.call()

[ 'modid', 'group', 'base_version', 'forge_version', 'license', 'license_url' ].each {
    if (!(it in mod)) throw new IllegalStateException("mod.properties is missing the required property ${it}")
}

;{
    Closure makeBoolean = { String property, defaultValue ->
        if (property in mod) {
            mod[property] = Boolean.parseBoolean(mod[property].toString())
        } else {
            mod[property] = defaultValue
        }
    }
    
    Closure makeUploadProperties = { String id ->
        if (!((id + '_project') in mod)) return void
        Closure query = { String field, String defaultValue ->
            if ((id + '_' + field) in mod) return mod[id + '_' + field].toString().strip()
            if (('upload_' + field) in mod) return mod['upload_' + field].toString().strip()
            return defaultValue
        }
        Properties properties = new Properties()
        properties.put('project', mod[id + '_project'])
        properties.put('release', query('release', 'alpha'))
        properties.put('versions', query('versions', mod.minecraft).split(",")*.strip().toList().findAll { !it.isEmpty() })
        properties.put('requirements', query('requirements', '').split(",")*.strip().toList().findAll { !it.isEmpty() })
        properties.put('optionals', query('optionals', '').split(",")*.strip().toList().findAll { !it.isEmpty() })
        return modgradle.wrap(properties)
    }
    
    Closure removeUploadProperties = { String id ->
        mod[id + '_project'] = void
        mod[id + '_release'] = void
        mod[id + '_versions'] = void
        mod[id + '_requirements'] = void
        mod[id + '_optionals'] = void
    }
    
    makeBoolean('mixin', false)
    makeBoolean('production_runs', false)
    makeBoolean('sources', false)
    makeBoolean('fmlonly', false)
    
    project.group = mod.group // Need to set group before querying modgradle.projectVersion
    mod['name'] = project.name
    mod['minecraft'] = mod.forge_version.toString().strip().substring(0, mod.forge_version.toString().strip().indexOf('-'))
    mod['forge'] = mod.forge_version.toString().strip().substring(mod.forge_version.toString().strip().indexOf('-') + 1)
    mod['forge_version'] = void
    if (mod.forge.contains('.')) {
        mod['fml'] = mod.forge.substring(0, mod.forge.indexOf('.'))
    } else {
        mod['fml'] = mod.forge
    }
    if ('local_maven' in mod) {
        mod['version'] = modgradle.projectVersion(mod.minecraft + '-' + mod.base_version, mod.local_maven)
    } else {
        mod['version'] = mod.minecraft + '-' + mod.base_version
    }
    project.version = mod.version
    
    var versionInfo = modgradle.minecraftVersion(mod.minecraft)
    mod['java'] = versionInfo.java
    mod['resource'] = versionInfo.resource
    mod['data'] = versionInfo.data
    if ('mixin' in versionInfo) {
        mod['mixin_version'] = versionInfo.mixin
    } else if (mod.mixin) {
        throw new IllegalStateException('Mixin is not available on minecraft ' + mod.minecraft)
    }

    if ('mappings' in mod) {
        String mappingsStr = mod.mappings
        if (mappingsStr.endsWith('_23w13a_or_b')) {
            mod['mapping_channel'] = mappingsStr.substring(0, mappingsStr.length() - 12)
            mod['mapping_version'] = '23w13a_or_b'
        } else {
            mod['mapping_channel'] = mappingsStr.substring(0, mappingsStr.indexOf('_'))
            mod['mapping_version'] = mappingsStr.substring(mappingsStr.indexOf('_') + 1)
        }
    } else {
        mod['mapping_channel'] = 'official'
        mod['mapping_version'] = mod.minecraft
    }
    mod['mappings'] = void
    
    mod['curse'] = makeUploadProperties('curse')
    mod['modrinth'] = makeUploadProperties('modrinth')
    removeUploadProperties('upload')
    removeUploadProperties('curse')
    removeUploadProperties('modrinth')
    
    try {
        mod['license_url'] = new java.net.URL(mod['license_url'].toString())
    } catch (MalformedURLException e) {
        throw new IllegalStateException("Invalid license URL", e)
    }
    
    try {
        var gitHash = System.getenv('GIT_COMMIT')
        if (gitHash == null) gitHash = 'HEAD'
        var stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'show', '-s', '--format=%cd', '--date=iso-strict', '' + gitHash
            standardOutput = stdout
        }
        var commitDate = java.nio.charset.StandardCharsets.UTF_8.decode(java.nio.ByteBuffer.wrap(stdout.toByteArray())).toString().strip()
        if (commitDate != null && !commitDate.isEmpty()) {
            mod['commit_date'] = commitDate
        }
    } catch (Exception ignored) {
        mod['commit_date'] = void
    }
}.call()
// Load secrets into ext.secrets
;{
    String secretFilePath = System.getenv('SECRET_PROPERTIES')
    if (secretFilePath == null) secretFilePath = 'secrets.properties'
    File secretFile = project.file(secretFilePath)
    Properties secretProperties = new Properties()
    if (secretFile.exists()) {
        secretFile.withReader { secretProperties.load(it) }
        
    }
    project.ext {
        secrets = modgradle.wrap(secretProperties)
    }
}.call()
// Add gitChangelog method to global mod object

// Taken from InventoryTweaks (https://github.com/Inventory-Tweaks/inventory-tweaks/blob/develop/build.gradle)

// InventoryTweaks is licensed under the MIT license:
/*
Copyright (c) 2011-2013 Marwane Kalam-Alami

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of
the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

; {
    String logFmt = '--pretty=tformat:- %s - *%aN*'
    if ('changelog_repository' in mod) {
        logFmt = '--pretty=tformat:- [%s](' + mod.changelog_repository.toString() + ') - *%aN*'
    }
    mod['changelog_repository'] = void
    
    mod['gitChangelog'] = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            def gitHash = System.getenv('GIT_COMMIT')
            def gitPrevHash = System.getenv('GIT_PREVIOUS_COMMIT')
            def travisRange = System.getenv('TRAVIS_COMMIT_RANGE')
            if (gitHash != null && gitPrevHash != null) {
                exec {
                    commandLine 'git', 'log', logFmt, '' + gitPrevHash + '...' + gitHash
                    standardOutput = stdout
                }
            } else if (gitHash != null) {
                exec {
                    commandLine 'git', 'log', logFmt, '' + gitHash
                    standardOutput = stdout
                }
            } else if (travisRange != null) {
                exec {
                    commandLine 'git', 'log', logFmt, '' + travisRange
                    standardOutput = stdout
                }
            }
            return java.nio.charset.StandardCharsets.UTF_8.decode(java.nio.ByteBuffer.wrap(stdout.toByteArray())).toString()
        } catch(ignored) {
            return ''
        }
    }
}.call()


// Applying base plugins and repository configuration
// ***** Apply gradle plugins ***** //

// Set the java toolchain level directly after applying the java plugin, as other ModGradle plugins
// may use that information and then also lock the property for later modification.
apply plugin: 'java'
java.toolchain.languageVersion = JavaLanguageVersion.of(mod.java)

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.moddingx.modgradle.mapping'
if (mod.sources) {
    apply plugin: 'org.moddingx.modgradle.sourcejar'
}

// ***** Base Project information ***** //

base {
    archivesName = project.name
}

println "Java: ${System.getProperty('java.version')}   JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')})   Arch: ${System.getProperty('os.arch')}"
println "Mod: ${project.name}(${mod.modid})   Group: ${project.group}   Version: ${project.version}"
println "Minecraft: ${mod.minecraft}   Target: java${mod.java}" + (mod.mixin ? "   Mixin: ${mod.mixin_version}" : '')
println ''
// Does not include mixin repo, mixin is added in mixin.gradle
repositories {
    maven { url = 'https://maven.moddingx.org/' }
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://libraries.minecraft.net' }
}


// Configuration of the minecraft block
dependencies {
    if (mod.fmlonly) {
        minecraft "net.minecraftforge:fmlonly:${mod.minecraft}-${mod.forge}"
    } else {
        minecraft "net.minecraftforge:forge:${mod.minecraft}-${mod.forge}"
    }
}

boolean minecraftHasDatagen = mod.resource >= 4 && !mod.fmlonly
boolean minecraftHasGameTest = mod.resource >= 8 && !mod.fmlonly

if (minecraftHasDatagen) {
    sourceSets.main.resources {
        srcDir 'src/generated/resources'
    }
}

minecraft {
    mappings channel: mod.mapping_channel, version: mod.mapping_version
    if (project.file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = project.file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    final Closure defaultRun = {
        property 'forge.logging.console.level', 'debug'
        property 'forge.logging.markers', 'REGISTRIES'
        if (mod.production_runs) {
            jvmArg '-Dproduction=true'
        }
        if ('mixin_version' in mod) {
            // Only add mixin related options if mixin is available
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', project.tasks.named('createSrgToMcp').get().getOutput().get().getAsFile().toPath().toAbsolutePath().normalize().toString()
            if (mod.mixin) {
                arg '-mixin.config=' + mod.modid + '.mixins.json'
                property 'mixin.debug.export', 'true'
            }
        }
        if (minecraftHasGameTest) {
            property 'forge.enabledGameTestNamespaces', mod.modid
        }
        mods {
            "${mod.modid}" {
                source sourceSets.main
            }
        }
    }
    runs {
        client {
            workingDirectory project.file('runClient')
        }.with(defaultRun)
        server {
            workingDirectory project.file('runServer')
        }.with(defaultRun)
        if (minecraftHasDatagen) {
            data {
                workingDirectory project.file('runData')
                args '--mod', mod.modid, '--all', '--output', file('src/generated/resources'), '--existing', file('src/main/resources')
            }.with(defaultRun)
        }
        if (minecraftHasGameTest) {
            gameTestServer {
                workingDirectory project.file('runGameTest')
            }.with(defaultRun)
        }
    }
}

mod['run'] = modgradle.wrap()

mod.run['sourceSet'] = { SourceSet sourceSet ->
    final Closure runConfigClosure = {
        mods {
            "${mod.modid}" {
                source sourceSet
            }
        }
    }
    minecraft {
        runs {
            client {}.with(runConfigClosure)
            server {}.with(runConfigClosure)
            if (mod.resource >= 4) {
                data {}.with(runConfigClosure)
            }
        }
    }
}

if (minecraftHasDatagen) {
    mod.run['existing'] = { String modid ->
        minecraft {
            runs {
                data {
                    args '--existing-mod', modid
                }
            }
        }
    }
} else {
    mod.run['existing'] = { String modid -> System.err.println("Can't add existing mod ${modid}, datagen is not available.") }
}

// Compilation, resource processing and packaging
processResources {
    exclude('/.cache/**')
}

afterEvaluate {
    processResources {
        filesMatching('META-INF/mods.toml') {
            expand mod.toMap()
        }
        mod.toMap().each { key, value ->
            if (value instanceof Serializable && !(value instanceof Closure)) {
                inputs.property("modutils_mod_" + key, value)
            }
        }
    }
}

compileJava {
    options.compilerArgs += [
            '-Amod.properties.mod_id=' + mod.modid,
            '-Amod.properties.mc_version=' + mod.minecraft,
            '-Amod.properties.mod_version=' + project.version,
            '-Amod.properties.java_version=' + mod.java
    ]
}

jar {
    manifest {
        attributes([
                'Specification-Title': mod.modid,
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': "mcmods.${mod.modid}"
        ])
        if ('commit_date' in mod) {
            attributes.put('Implementation-Timestamp', mod.commit_date)
        }
    }
}
jar.finalizedBy('reobfJar')

// Force UTF-8
afterEvaluate {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test).configureEach {
        defaultCharacterEncoding = 'UTF-8'
    }

    tasks.withType(Javadoc).configureEach {
        options.encoding = 'UTF-8'
    }
}

// Make reproducible jars
afterEvaluate {
    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

// ModGradle setup and mcupdate
apply plugin: 'org.moddingx.modgradle.meta'

setup {
    modid = mod.modid
    license = mod.license
    licenseUrl = mod.license_url
    mixin = mod.mixin
    repo = new URL("https://github.com/ModdingX/ModUtils.git")
    repoBranch = "experimental"
}

if ('mcupdate' in mod) {
    apply plugin: 'org.moddingx.modgradle.mcupdate'
    
    mcupdate {
        version mod.mcupdate
    }
    
    task modutils_removeUpdateProperty {
        doLast {
            if (java.nio.file.Files.isRegularFile(project.file('mod.properties').toPath())) {
                List<String> properties = new ArrayList<>(Arrays.asList(java.nio.file.Files.readString(project.file('mod.properties').toPath()).split('\n')))
                properties.removeIf(java.util.regex.Pattern.compile('\\s*mcupdate\\s*=\\s*' + java.util.regex.Pattern.quote(mod.mcupdate) + '\\s*', java.util.regex.Pattern.CASE_INSENSITIVE).asMatchPredicate())
                java.nio.file.Files.writeString(project.file('mod.properties').toPath(), String.join('\n', properties), java.nio.file.StandardOpenOption.TRUNCATE_EXISTING)
            }
        }
    }

    afterEvaluate {
        // afterEvaluate as the mcupdate task does not exist yet
        // Need to get the task like this as we have the mcupdate extension that shades the task
        project.tasks.getByName('mcupdate').finalizedBy(modutils_removeUpdateProperty)
    }
}

// Configuration of mixin
if (mod.mixin) {
    apply plugin: 'org.spongepowered.mixin'

repositories {
    maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
}

dependencies {
    annotationProcessor "org.spongepowered:mixin:${mod.mixin_version}:processor"
}

mixin {
    add sourceSets.main, "${mod.modid}.refmap.json"
}

jar {
    manifest {
        attributes.put('MixinConfigs', "${mod.modid}.mixins.json")
    }
}

// Prevent Mixin annotation processor from getting into IDEAs annotation processor settings
if (System.getProperty('idea.sync.active') == 'true') {
    afterEvaluate {
        tasks.withType(JavaCompile).configureEach {
            it.options.annotationProcessorPath = files()
        }
    }
}
}

if ('local_maven' in mod) {
    apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact jar
            if (mod.sources) {
                artifact sourceJar
            }
            pom {
                licenses {
                    license {
                        name = mod.license
                        url = mod.license_url.toString()
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url mod.local_maven
        }
    }
}
publish.dependsOn('reobfJar')
}

if ('curse' in mod) {
    apply plugin: 'net.darkhax.curseforgegradle'

String curseChangelog = mod.gitChangelog()
task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if ('curse_auth' in secrets) {
        apiToken = secrets.curse_auth.toString()
    } else {
        apiToken = ''
    }
    
    Closure fileConfig = { file ->
        file.releaseType = mod.curse.release
        file.changelog = curseChangelog
        file.changelogType = 'markdown'
        mod.curse.requirements.each { file.addRequirement(it) }
        mod.curse.optionals.each { file.addOptional(it) }
    }
    
    def mainFile = upload(mod.curse.project, jar)
    fileConfig(mainFile)
    
    if (mod.sources) {
        def sourcesFile = mainFile.withAdditionalFile(sourceJar)
        fileConfig(sourcesFile)
    }
}
project.tasks.getByName('curseforge').dependsOn('reobfJar')
}

if ('modrinth' in mod) {
    apply plugin: 'com.modrinth.minotaur'

String modrinthChangelog = mod.gitChangelog()
modrinth {
    if ('modrinth_auth' in secrets) {
        token = secrets.modrinth_auth.toString()
    } else {
        token = ''
    }
    projectId = mod.modrinth.project
    versionNumber = project.version
    versionName = jar.getArchiveFileName().get()
    uploadFile = jar
    if (mod.sources) {
        additionalFiles = [ sourceJar ]
    }

    changelog = modrinthChangelog
    versionType = mod.modrinth.release
    gameVersions = mod.modrinth.versions
    loaders = [ "forge" ]

    dependencies = []
    mod.modrinth.requirements.each { dependencies.add(new com.modrinth.minotaur.dependencies.ModDependency(it, "required")) }
    mod.modrinth.optionals.each { dependencies.add(new com.modrinth.minotaur.dependencies.ModDependency(it, "optional")) }
}
project.tasks.getByName('modrinth').dependsOn('reobfJar')
}
